# Test cases for MyList class.

>>> MyList = __import__('1-my_list').MyList

# Check if Mylist is a subclass of list and inherits from list
>>> issubclass(MyList, list)
True

# Check for length of docstring
>>> len(__import__("1-my_list").__doc__) > 1
True
>>> len(__import__("1-my_list").MyList.__doc__) > 1
True
>>> len(__import__("1-my_list").MyList.print_sorted.__doc__) > 1
True

# Test Case 1: Create an empty list, add elements, and print sorted
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted() == my_list
[1, 2, 3, 4, 5]
False

# Test Case 2: Create an empty list, print it
>>> empty_list = MyList()
>>> print(empty_list)
[]

# Test Case 3: Create a list with repeated elements, print sorted
>>> repeated_list = MyList([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
>>> print(repeated_list)
[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
>>> repeated_list.print_sorted()
[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

# Test Case 4: Create a list with positive and negative elements, print sorted
>>> pos_neg_list = MyList([-3, 1, -4, -1, 5, -9, -2, -6, -5, 3, -5])
>>> print(pos_neg_list)
[-3, 1, -4, -1, 5, -9, -2, -6, -5, 3, -5]
>>> pos_neg_list.print_sorted()
[-9, -6, -5, -5, -4, -3, -2, -1, 1, 3, 5]

# Test Case 5: Create a list with negative elements, print sorted
>>> negative_list = MyList([-3, -1, -4, -1, -5, -9, -2, -6, -5, -3, -5])
>>> print(negative_list)
[-3, -1, -4, -1, -5, -9, -2, -6, -5, -3, -5]
>>> negative_list.print_sorted()
[-9, -6, -5, -5, -5, -4, -3, -3, -2, -1, -1]

# Test Case 6: Create a list with strings, print sorted
>>> string_list = MyList(['apple', 'orange', 'banana', 'grape', 'kiwi'])
>>> print(string_list)
['apple', 'orange', 'banana', 'grape', 'kiwi']
>>> string_list.print_sorted()
['apple', 'banana', 'grape', 'kiwi', 'orange']

# Error Test Case 7: Create a list with integers and strings, print sorted
>>> int_str_list = MyList(['apple', 'orange', -10, 'banana', 'grape', 15, 'kiwi'])
>>> print(int_str_list)
['apple', 'orange', -10, 'banana', 'grape', 15, 'kiwi']
>>> int_str_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'int' and 'str'

# Test Case 8: Try to print_sorted on an empty list (should not raise an error)
>>> print(empty_list.print_sorted())
[]
None

# Test Case 9: Create a list with zeros
>>> zero_list = MyList([0, 0, 0, 0, 0, 0, 0, 0, 0])
>>> print(zero_list)
[0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> zero_list.print_sorted()
[0, 0, 0, 0, 0, 0, 0, 0, 0]

# Error Test Case 10: Providing an argument (integer) in the function call
>>> my_list.print_sorted(3)
Traceback (most recent call last):
    ...
TypeError: print_sorted() takes 1 positional argument but 2 were given

# Error Test Case 11: Providing an argument (string) in the function call
>>> my_list.print_sorted("invalid")
Traceback (most recent call last):
    ...
TypeError: print_sorted() takes 1 positional argument but 2 were given


# Error Test Case 12: Try to append a non-integer or non-string element to the list (NameError)
>>> my_list.append(invalid)
Traceback (most recent call last):
    ...
NameError: name 'invalid' is not defined


# Error Test Case 13: Passing nan as an argument
>>> infin_list = MyList(float('nan'))
Traceback (most recent call last):
    ...
TypeError: 'float' object is not iterable

# Error Test Case 14: Passing inf as an argument
>>> infin_list = MyList(float('inf'))
Traceback (most recent call last):
    ...
TypeError: 'float' object is not iterable
